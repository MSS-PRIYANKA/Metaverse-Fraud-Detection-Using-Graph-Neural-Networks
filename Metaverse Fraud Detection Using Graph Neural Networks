{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMCs/lddtSgnBZSg7jGhOL5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K2w7AuNwLAXb","executionInfo":{"status":"ok","timestamp":1711471651022,"user_tz":-330,"elapsed":3684,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"dc3c4af7-a0a5-404c-b110-08b09b0c052a"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!pip install torch"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LwEtyjP_LOC2","executionInfo":{"status":"ok","timestamp":1711471658454,"user_tz":-330,"elapsed":7443,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"53cf8d88-c394-4a76-dc39-15ab899f2704"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.2.1+cu121)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.13.1)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.10.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.3)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /usr/local/lib/python3.10/dist-packages (from torch) (2.19.3)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch) (12.1.105)\n","Requirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.2.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch) (12.4.99)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n"]}]},{"cell_type":"code","source":["!pip install scikit-learn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nFjkm2ZdLnW0","executionInfo":{"status":"ok","timestamp":1711471665364,"user_tz":-330,"elapsed":6934,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"0f3d26bd-bbf9-4457-f34c-21a11b19d178"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.3.0)\n"]}]},{"cell_type":"code","source":["!pip install Networks"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ojKWAf2pLoqJ","executionInfo":{"status":"ok","timestamp":1711471674580,"user_tz":-330,"elapsed":9229,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"b4f9f11e-c29e-4444-aed2-e89f836c4c8e"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Networks in /usr/local/lib/python3.10/dist-packages (0.3.7)\n","Requirement already satisfied: jsonpickle in /usr/local/lib/python3.10/dist-packages (from Networks) (3.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from Networks) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from Networks) (1.11.4)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from Networks) (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (4.50.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (24.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->Networks) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->Networks) (1.16.0)\n"]}]},{"cell_type":"code","source":["!pip install torch_geometric"],"metadata":{"id":"jDN7XZcfLqfs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install Test-train-validation-split"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rzt6eCS3O04j","executionInfo":{"status":"ok","timestamp":1711471690965,"user_tz":-330,"elapsed":7685,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"298ebb1f-8721-4d08-8bc6-a40f4f076bff"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Test-train-validation-split in /usr/local/lib/python3.10/dist-packages (1.0.0)\n"]}]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_geometric.data import Data\n","from torch_geometric.nn import GCNConv\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","import pandas as pd"],"metadata":{"id":"OpR6d8i8uran","executionInfo":{"status":"ok","timestamp":1711473579084,"user_tz":-330,"elapsed":405,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}}},"execution_count":100,"outputs":[]},{"cell_type":"code","execution_count":95,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":790},"id":"SzfyleSlKpUs","executionInfo":{"status":"ok","timestamp":1711473369109,"user_tz":-330,"elapsed":1270,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"11766c43-7379-41c8-b146-3b8ced0921e3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 timestamp  hour_of_day  \\\n","0      2022-04-11 12:47:27           12   \n","1      2022-06-14 19:12:46           19   \n","2      2022-01-18 16:26:59           16   \n","3      2022-06-15 09:20:04            9   \n","4      2022-02-18 14:35:30           14   \n","...                    ...          ...   \n","78595  2022-02-13 12:52:27           12   \n","78596  2022-02-16 16:15:29           16   \n","78597  2022-08-04 16:06:42           16   \n","78598  2022-02-26 04:06:08            4   \n","78599  2022-06-25 14:27:37           14   \n","\n","                                  sending_address  \\\n","0      0x9d32d0bf2c00f41ce7ca01b66e174cc4dcb0c1da   \n","1      0xd6e251c23cbf52dbd472f079147873e655d8096f   \n","2      0x2e0925b922fed01f6a85d213ae2718f54b8ca305   \n","3      0x93efefc25fcaf31d7695f28018d7a11ece55457f   \n","4      0xad3b8de45d63f5cce28aef9a82cf30c397c6ceb9   \n","...                                           ...   \n","78595  0xa99b9a7f5c5dd37429771efd3b93c6fbe1ab2936   \n","78596  0xcca095ad2d508c200bda1141f783d77c3e6cbb08   \n","78597  0xe0b340171486b08f0c1f4ac607ed776478cefd2b   \n","78598  0xb0b2f6fc707fbb7f9d27a9f4fe0cb0d6b39a0155   \n","78599  0x6ea0e02fb6ee893dc3b70b98df1a48165d28eb09   \n","\n","                                receiving_address      amount  \\\n","0      0x39f82e1c09bc6d7baccc1e79e5621ff812f50572  796.949206   \n","1      0x51e8fbe24f124e0e30a614e14401b9bbfed5384c    0.010000   \n","2      0x52c7911879f783d590af45bda0c0ef2b8536706f  778.197390   \n","3      0x8ac3b7bd531b3a833032f07d4e47c7af6ea7bace  300.838358   \n","4      0x6fdc047c2391615b3facd79b4588c7e9106e49f2  775.569344   \n","...                                           ...         ...   \n","78595  0x5a78c88c5fc1e9b512f6c64e266b46a9db0a7238  660.280373   \n","78596  0xb71a4df291ea8e9996a74e77ab63f5abcbfe90f5  310.273397   \n","78597  0x577754308538f4be10a41afb4f8900cd24d7098f  624.674332   \n","78598  0xd6ba299fdd52f09f01d9648036ca446498c01ac2  401.391592   \n","78599  0xc28cbdb253f12174f7aa80ff6c6660f2e09397d7  523.947956   \n","\n","      transaction_type location_region  ip_prefix  login_frequency  \\\n","0             transfer          Europe    192.000                3   \n","1             purchase   South America    172.000                5   \n","2             purchase            Asia    192.168                3   \n","3             transfer   South America    172.000                8   \n","4                 sale          Africa    172.160                6   \n","...                ...             ...        ...              ...   \n","78595         transfer          Africa    172.000                1   \n","78596         purchase          Africa    172.000                5   \n","78597         purchase          Africa    192.000                1   \n","78598         purchase            Asia    192.168                4   \n","78599         transfer   North America    172.000                4   \n","\n","       session_duration purchase_pattern    age_group  risk_score  \\\n","0                    48          focused  established     18.7500   \n","1                    61          focused  established     25.0000   \n","2                    74          focused  established     31.2500   \n","3                   111       high_value      veteran     36.7500   \n","4                   100       high_value      veteran     62.5000   \n","...                 ...              ...          ...         ...   \n","78595                27           random          new     26.2500   \n","78596                60          focused  established     26.2500   \n","78597                34           random          new     36.7500   \n","78598                56          focused  established     35.4375   \n","78599                56          focused  established     15.7500   \n","\n","             anomaly  \n","0           low_risk  \n","1           low_risk  \n","2           low_risk  \n","3           low_risk  \n","4      moderate_risk  \n","...              ...  \n","78595       low_risk  \n","78596       low_risk  \n","78597       low_risk  \n","78598       low_risk  \n","78599       low_risk  \n","\n","[78600 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-a085a324-10dd-47de-a3b8-1741a77c8ba4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>timestamp</th>\n","      <th>hour_of_day</th>\n","      <th>sending_address</th>\n","      <th>receiving_address</th>\n","      <th>amount</th>\n","      <th>transaction_type</th>\n","      <th>location_region</th>\n","      <th>ip_prefix</th>\n","      <th>login_frequency</th>\n","      <th>session_duration</th>\n","      <th>purchase_pattern</th>\n","      <th>age_group</th>\n","      <th>risk_score</th>\n","      <th>anomaly</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2022-04-11 12:47:27</td>\n","      <td>12</td>\n","      <td>0x9d32d0bf2c00f41ce7ca01b66e174cc4dcb0c1da</td>\n","      <td>0x39f82e1c09bc6d7baccc1e79e5621ff812f50572</td>\n","      <td>796.949206</td>\n","      <td>transfer</td>\n","      <td>Europe</td>\n","      <td>192.000</td>\n","      <td>3</td>\n","      <td>48</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>18.7500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2022-06-14 19:12:46</td>\n","      <td>19</td>\n","      <td>0xd6e251c23cbf52dbd472f079147873e655d8096f</td>\n","      <td>0x51e8fbe24f124e0e30a614e14401b9bbfed5384c</td>\n","      <td>0.010000</td>\n","      <td>purchase</td>\n","      <td>South America</td>\n","      <td>172.000</td>\n","      <td>5</td>\n","      <td>61</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>25.0000</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2022-01-18 16:26:59</td>\n","      <td>16</td>\n","      <td>0x2e0925b922fed01f6a85d213ae2718f54b8ca305</td>\n","      <td>0x52c7911879f783d590af45bda0c0ef2b8536706f</td>\n","      <td>778.197390</td>\n","      <td>purchase</td>\n","      <td>Asia</td>\n","      <td>192.168</td>\n","      <td>3</td>\n","      <td>74</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>31.2500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2022-06-15 09:20:04</td>\n","      <td>9</td>\n","      <td>0x93efefc25fcaf31d7695f28018d7a11ece55457f</td>\n","      <td>0x8ac3b7bd531b3a833032f07d4e47c7af6ea7bace</td>\n","      <td>300.838358</td>\n","      <td>transfer</td>\n","      <td>South America</td>\n","      <td>172.000</td>\n","      <td>8</td>\n","      <td>111</td>\n","      <td>high_value</td>\n","      <td>veteran</td>\n","      <td>36.7500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022-02-18 14:35:30</td>\n","      <td>14</td>\n","      <td>0xad3b8de45d63f5cce28aef9a82cf30c397c6ceb9</td>\n","      <td>0x6fdc047c2391615b3facd79b4588c7e9106e49f2</td>\n","      <td>775.569344</td>\n","      <td>sale</td>\n","      <td>Africa</td>\n","      <td>172.160</td>\n","      <td>6</td>\n","      <td>100</td>\n","      <td>high_value</td>\n","      <td>veteran</td>\n","      <td>62.5000</td>\n","      <td>moderate_risk</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>78595</th>\n","      <td>2022-02-13 12:52:27</td>\n","      <td>12</td>\n","      <td>0xa99b9a7f5c5dd37429771efd3b93c6fbe1ab2936</td>\n","      <td>0x5a78c88c5fc1e9b512f6c64e266b46a9db0a7238</td>\n","      <td>660.280373</td>\n","      <td>transfer</td>\n","      <td>Africa</td>\n","      <td>172.000</td>\n","      <td>1</td>\n","      <td>27</td>\n","      <td>random</td>\n","      <td>new</td>\n","      <td>26.2500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>78596</th>\n","      <td>2022-02-16 16:15:29</td>\n","      <td>16</td>\n","      <td>0xcca095ad2d508c200bda1141f783d77c3e6cbb08</td>\n","      <td>0xb71a4df291ea8e9996a74e77ab63f5abcbfe90f5</td>\n","      <td>310.273397</td>\n","      <td>purchase</td>\n","      <td>Africa</td>\n","      <td>172.000</td>\n","      <td>5</td>\n","      <td>60</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>26.2500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>78597</th>\n","      <td>2022-08-04 16:06:42</td>\n","      <td>16</td>\n","      <td>0xe0b340171486b08f0c1f4ac607ed776478cefd2b</td>\n","      <td>0x577754308538f4be10a41afb4f8900cd24d7098f</td>\n","      <td>624.674332</td>\n","      <td>purchase</td>\n","      <td>Africa</td>\n","      <td>192.000</td>\n","      <td>1</td>\n","      <td>34</td>\n","      <td>random</td>\n","      <td>new</td>\n","      <td>36.7500</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>78598</th>\n","      <td>2022-02-26 04:06:08</td>\n","      <td>4</td>\n","      <td>0xb0b2f6fc707fbb7f9d27a9f4fe0cb0d6b39a0155</td>\n","      <td>0xd6ba299fdd52f09f01d9648036ca446498c01ac2</td>\n","      <td>401.391592</td>\n","      <td>purchase</td>\n","      <td>Asia</td>\n","      <td>192.168</td>\n","      <td>4</td>\n","      <td>56</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>35.4375</td>\n","      <td>low_risk</td>\n","    </tr>\n","    <tr>\n","      <th>78599</th>\n","      <td>2022-06-25 14:27:37</td>\n","      <td>14</td>\n","      <td>0x6ea0e02fb6ee893dc3b70b98df1a48165d28eb09</td>\n","      <td>0xc28cbdb253f12174f7aa80ff6c6660f2e09397d7</td>\n","      <td>523.947956</td>\n","      <td>transfer</td>\n","      <td>North America</td>\n","      <td>172.000</td>\n","      <td>4</td>\n","      <td>56</td>\n","      <td>focused</td>\n","      <td>established</td>\n","      <td>15.7500</td>\n","      <td>low_risk</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>78600 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a085a324-10dd-47de-a3b8-1741a77c8ba4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a085a324-10dd-47de-a3b8-1741a77c8ba4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a085a324-10dd-47de-a3b8-1741a77c8ba4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f2816ee4-84db-44c2-9b7b-0da956364879\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2816ee4-84db-44c2-9b7b-0da956364879')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f2816ee4-84db-44c2-9b7b-0da956364879 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_98e1d7d9-b4e6-487a-9859-3b039b7fe615\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_98e1d7d9-b4e6-487a-9859-3b039b7fe615 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 78600,\n  \"fields\": [\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 78513,\n        \"samples\": [\n          \"2022-01-30 05:37:20\",\n          \"2022-11-15 16:12:17\",\n          \"2022-02-04 16:42:08\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour_of_day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          20,\n          2,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sending_address\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1161,\n        \"samples\": [\n          \"0x3bf693e243818239910d10ddea5d88ff88e2d5af\",\n          \"0x7830060160fc83efc46f5373627fbaba41d58b11\",\n          \"0xc6ed1f1e2a785b1991a0c2a877d19c750a7018b3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"receiving_address\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1166,\n        \"samples\": [\n          \"0x5228fdaad4a4db8eef769aa65059383a2d915068\",\n          \"0x691649f8bff990271b207da5b09c7e6e3c9a20b4\",\n          \"0xa182118703eca1c8a55b242298bda53985f1fb07\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 245.8981459128203,\n        \"min\": 0.01,\n        \"max\": 1557.150905156049,\n        \"num_unique_values\": 76771,\n        \"samples\": [\n          274.9589947673373,\n          180.2410484343668,\n          621.2108476394092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"transaction_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"purchase\",\n          \"scam\",\n          \"sale\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location_region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"South America\",\n          \"North America\",\n          \"Asia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ip_prefix\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 69.38814284990534,\n        \"min\": 10.0,\n        \"max\": 192.168,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          172.0,\n          10.0,\n          192.168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"login_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"session_duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 20,\n        \"max\": 159,\n        \"num_unique_values\": 140,\n        \"samples\": [\n          153,\n          124,\n          82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"purchase_pattern\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"focused\",\n          \"high_value\",\n          \"random\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"established\",\n          \"veteran\",\n          \"new\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"risk_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.775365232173453,\n        \"min\": 15.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          56.7,\n          67.5,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anomaly\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"low_risk\",\n          \"moderate_risk\",\n          \"high_risk\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":95}],"source":["# Load the dataset\n","import pandas as pd\n","df = pd.read_csv('/content/drive/MyDrive/Projects/Metaverse Fraud Detection Using Graph Neural Networks/metaverse_transactions_dataset.csv')\n","\n","df"]},{"cell_type":"code","source":["dict(df['transaction_type'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rwMkr9S04jIb","executionInfo":{"status":"ok","timestamp":1711475430999,"user_tz":-330,"elapsed":687,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"ad9c4344-80d5-44af-fbe8-a99dbf82b67a"},"execution_count":122,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{2: 25040, 1: 24940, 4: 22125, 3: 3949, 0: 2546}"]},"metadata":{},"execution_count":122}]},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","import seaborn as sns\n","df.groupby('transaction_type').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"F4FZNLjO0I_P","executionInfo":{"status":"ok","timestamp":1711475379328,"user_tz":-330,"elapsed":1454,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"f96e9c25-d65e-4064-e5cd-35593665b0cf"},"execution_count":121,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"source":["#amount\n","\n","from matplotlib import pyplot as plt\n","df['amount'].plot(kind='hist', bins=20, title='amount')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"cell_type":"code","execution_count":119,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"8qPBRoHHzvz3","executionInfo":{"status":"ok","timestamp":1711474847480,"user_tz":-330,"elapsed":840,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"fba185b7-3594-4168-a976-aa50b336ea92"}},{"cell_type":"code","source":["# risk_score\n","\n","from matplotlib import pyplot as plt\n","df['risk_score'].plot(kind='hist', bins=20, title='risk_score')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"metadata":{"id":"_oIQIPAQz7aN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#session_duration\n","\n","from matplotlib import pyplot as plt\n","df['session_duration'].plot(kind='hist', bins=20, title='session_duration')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"metadata":{"id":"LQDBUI5Wz9Zs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#session_duration vs risk_score\n","\n","from matplotlib import pyplot as plt\n","df.plot(kind='scatter', x='session_duration', y='risk_score', s=32, alpha=.8)\n","plt.gca().spines[['top', 'right',]].set_visible(False)"],"metadata":{"id":"35Wq7aFCz-1v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Preprocess the dataset\n","label_encoder = LabelEncoder()\n","df['transaction_type'] = label_encoder.fit_transform(df['transaction_type'])\n","df['location_region'] = label_encoder.fit_transform(df['location_region'])\n","df['purchase_pattern'] = label_encoder.fit_transform(df['purchase_pattern'])\n","df['age_group'] = label_encoder.fit_transform(df['age_group'])\n","df['anomaly'] = label_encoder.fit_transform(df['anomaly'])\n","\n","# Create a dictionary to map addresses to unique indices\n","address_to_index = {address: index for index, address in enumerate(set(df['sending_address']) | set(df['receiving_address']))}\n","\n","# Map addresses in the DataFrame to their corresponding indices\n","df['sending_address'] = df['sending_address'].map(address_to_index)\n","df['receiving_address'] = df['receiving_address'].map(address_to_index)\n","\n","# Extract edge indices from the DataFrame\n","edge_index = torch.tensor(df[['sending_address', 'receiving_address']].values.T, dtype=torch.long)\n","\n","# Split dataset into features and target\n","X = df.drop(columns=['anomaly'])\n","y = df['anomaly']\n","\n","# Ensure the number of classes is correctly determined\n","num_classes = len(set(y))\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Convert data to PyTorch tensors\n","X_train = torch.tensor(X_train.values, dtype=torch.float)\n","X_test = torch.tensor(X_test.values, dtype=torch.float)\n","y_train = torch.tensor(y_train.values, dtype=torch.long)  # Ensure y_train is of type long\n","y_test = torch.tensor(y_test.values, dtype=torch.long)    # Ensure y_test is of type long\n","\n","# Create a PyTorch Geometric Data object\n","data = Data(x=X_train, y=y_train, edge_index=edge_index)\n","\n","# Define a Graph Neural Network model\n","class GNNModel(nn.Module):\n","    def __init__(self):\n","        super(GNNModel, self).__init__()\n","        self.conv1 = GCNConv(X_train.size(1), 16)\n","        self.conv2 = GCNConv(16, num_classes)  # Output layer matches the number of classes\n","\n","    def forward(self, data):\n","        x, edge_index = data.x, data.edge_index\n","        x = self.conv1(x, edge_index)\n","        x = torch.relu(x)\n","        x = self.conv2(x, edge_index)\n","        return torch.log_softmax(x, dim=1)\n","\n","# Initialize model, loss function, and optimizer\n","model = GNNModel()\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.01)\n","\n","# Train the model\n","model.train()\n","for epoch in range(100):\n","    optimizer.zero_grad()\n","    out = model(data)\n","    loss = criterion(out, data.y)\n","    loss.backward()\n","    optimizer.step()\n","\n","# Evaluate the model\n","model.eval()\n","with torch.no_grad():\n","    pred = model(data).argmax(dim=1)\n","    accuracy = (pred == data.y).sum().item() / len(data.y)\n","    print(f'Accuracy: {accuracy*100}')\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AiIaph8-x6gW","executionInfo":{"status":"ok","timestamp":1711473692563,"user_tz":-330,"elapsed":6158,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"3776609d-0346-471e-fae2-8e053e460cb1"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 93.13931297709924\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import networkx as nx\n","\n","def visualize_graph(data):\n","    edge_list = data.edge_index.tolist()\n","    G = nx.Graph()\n","    G.add_edges_from(edge_list)\n","    nx.draw(G, with_labels=True)\n","    plt.show()\n","\n","# test_data = pd.DataFrame(sample_data)\n","\n","# Visualize the graph\n","visualize_graph(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"PHP3XCRy7mfF","executionInfo":{"status":"error","timestamp":1711476484660,"user_tz":-330,"elapsed":688,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}},"outputId":"81d73d65-bfe4-4dbd-df72-639d1e185fe9"},"execution_count":138,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'DataFrame' object has no attribute 'edge_index'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-138-de4a1f42ed9f>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Visualize the graph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mvisualize_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-138-de4a1f42ed9f>\u001b[0m in \u001b[0;36mvisualize_graph\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mvisualize_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0medge_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0medge_index\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mG\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGraph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_edges_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medge_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5900\u001b[0m         ):\n\u001b[1;32m   5901\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5902\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5904\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'edge_index'"]}]},{"cell_type":"code","source":["# with torch.no_grad():\n","#     train_pred = model(data).argmax(dim=1)\n","\n","# # Convert PyTorch tensors to numpy arrays\n","# y_train_numpy = data.y.cpu().numpy()\n","# train_pred_numpy = train_pred.cpu().numpy()\n","\n","# # Print classification report and confusion matrix for train data\n","# print(\"Classification Report for Train Data:\")\n","# print(classification_report(y_train_numpy, train_pred_numpy))\n","\n","# print(\"Confusion Matrix for Train Data:\")\n","# print(confusion_matrix(y_train_numpy, train_pred_numpy))\n","\n","\n","# def visualize_graph(data):\n","#     edge_list = data.edge_index.T.cpu().numpy().tolist()\n","#     G = nx.Graph()\n","#     G.add_edges_from(edge_list)\n","#     nx.draw(G, with_labels=True)\n","#     plt.show()\n","\n","# visualize_graph(data)"],"metadata":{"id":"mMcC081U6-M5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.save(model.state_dict(), 'best.pth')"],"metadata":{"id":"vNstM-hEyKKT","executionInfo":{"status":"ok","timestamp":1711473732997,"user_tz":-330,"elapsed":416,"user":{"displayName":"Priyanka M","userId":"00226788853160388155"}}},"execution_count":104,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"5Xqd2G63u4a9"},"execution_count":null,"outputs":[]}]}